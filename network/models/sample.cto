/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


namespace org.acme.AgrichainNetwork

/**
 * The type of product being shipped
 */
enum ProductType {
  o POTATO
  o APPLES
  o STRAWBERRY
  o BLUEBERRY
  o BLUEB 
  o WHEAT
  o OAT
}

/**
 * The status of a shipment
 */
enum ShipmentStatus {
  o CREATED
  o IN_TRANSIT
  o SELLING
  o SOLD
}



/**
 * An abstract participant type in this business network
 */
abstract participant Business identified by email {
  o String email
  o String fullname 
  o String cellnumber
  o String password
  o Double accountBalance
}

/**
 * A Producer is a type of participant in the network
 */
participant Producer extends Business {
}

/**
 * A Distributor is a type of participant in the network
 */
participant Distributor extends Business {
}

/**
 * An Consumer is a type of participant in the network
 */
participant Consumer extends Business {
}

/**
 * A shipment being tracked as an asset on the ledger
 */
asset Shipment identified by shipmentId {
  o String shipmentId
  o ProductType type
  o ShipmentStatus status
  o Long unitCount
  --> Contract contract
}

/**
 * Defines a contract between a Producer and a Consumer to ship using
 * a Distributor, paying a set unit price.
 */
asset Contract identified by contractId {
  o String contractId
  --> Producer producer
  --> Distributor distributor
  --> Consumer consumer
  o Double unitPrice
}


/**
 * An abstract transaction that is related to a Shipment
 */

abstract transaction ShipmentTransaction {
  --> Shipment shipment
}

/**
 * A notification that a shipment has been received by the
 * Distributor and that funds should be transferred from the Distributor
 * to the Producer.
 */
transaction ShipmentReceived extends ShipmentTransaction {
}

transaction CreateOrder{
  o Integer amount
  --> Shipment shipment
  --> Producer producer
  --> Distributor distributed
  --> Consumer consumer
}

